L18
========================================================
author: Vladimir Zhbanko
date: 
autosize: true

Scenario: Password is in clear text
========================================================

```{r, eval=FALSE, include=TRUE}
# in this example we use function from RODBC library
library(RODBC) 

# function that connects to SQL and return DF object
getDataFromSQL <- function(wrkTableName = "WRK_TABLE_NAME",
                           connection = "SQL_SERVER_NAME",
                           userID = "SQL_USER_ID",
                           passID = "Your_Exposed_Password:*("){
  
  ch2<-odbcConnect(connection,uid = userID,pwd=passID)
  if(ch2 == -1){
    print("Error: connection was not established")
    
    }else{
      # Contruct SQL request
      sql.request2 <- paste("SELECT * FROM", wrkTableName)
      # Contruct SQL request and get data
      res2 <- as.data.frame(sqlQuery(ch2, sql.request2))
      odbcClose(ch2)
      return(res2)
      
  }
}

# usage of this function
Data <- getDataFromSQL("DB_NAME.dbo.WRK_TABLENAME")

```


Solution Preparation - place our Private Key to the dedicated folder
============================================================

In order to make everything happen you should generate your private key and place it to the specific folder. 
For example, I will create a folder named `"~/ShinyApps/.rsa/"` and will place my private key `"key.me"`. Working application or script can get access to this folder using the following path: `"~/ShinyApps/.rsa/key.me"`

Notice that by using `'.'` before the folder name will make this folder hidden. You may potentially not seeing it... This is small additional protection for your key...



Solution P1: Encrypt you password - do this once!
============================================================

Next thing we need to proceed is to encrypt our password. We know how to do this already:

```{r, eval=FALSE, include=TRUE}
library(openssl)
library(tidyverse)
## Encrypt with PRIVATE key (e.g. use this code yourself)
"YourNotExposedPassword" %>% 
  # serialize the object
  serialize(connection = NULL) %>% 
  # encrypt the object
  encrypt_envelope("~/ShinyApps/.rsa/key.me") %>% 
  # write encrypted data to File
  write_rds("Public.rds")
```

`remember to erase the string and clear the history!`

When you run this code file 'Public.rds' will be generated. It will contain our password. You can decide if you want to check it it to version control or not. This object must be available for your Script or ShinyApp

Solution P2: Adapting function
==============================================================
We rewrite this function and simply remove the password

```{r, eval=FALSE, include=TRUE}
# function that connects to SQL and return DF object, there is no password in clear text...!!!
getDataFromSQL <- function(wrkTableName = "WRK_TABLE_NAME",
                           connection = "SQL_SERVER_NAME",
                           userID = "SQL_USER_ID",
                           passID){
  
  ch2<-odbcConnect(connection,uid = userID,pwd = passID)
  if(ch2 == -1){
    print("Error: connection was not established")
    
  }else{
    # Contruct SQL request
    sql.request2 <- paste("SELECT * FROM", wrkTableName)
    # Contruct SQL request and get data
    res2 <- as.data.frame(sqlQuery(ch2, sql.request2))
    odbcClose(ch2)
    return(res2)
  }
}
```


Solution P3: Retrieve the password
===============================================================

```{r, eval=FALSE, include=TRUE}
# retrieve password
out <- readRDS("Public.rds")

# decrypting the password using public data list and private key
pass <- unserialize(decrypt_envelope(out$data, out$iv, out$session, "~/ShinyApps/.rsa/key.me", password = ""))

```

Solution P4: Get the data and clear password
===============================================================

```{r, eval=FALSE, include=TRUE}
# data frame containing flow information
DF_Data <- getDataFromSQL("DB_NAME.dbo.WRK_TABLENAME", passID = pass)

```

```{r, eval=FALSE, include=TRUE}
# remove password object
rm(pass, out)
```


